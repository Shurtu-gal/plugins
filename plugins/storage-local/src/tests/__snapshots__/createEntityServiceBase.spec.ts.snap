// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test createEntityServiceBase hook should add all the necessary imports 1`] = `
"import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ENTITY as PRISMA_ENTITY } from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

declare const CREATE_ARGS_MAPPING: Prisma.CREATE_ARGS;
declare const UPDATE_ARGS_MAPPING: Prisma.UPDATE_ARGS;

export class UserServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.COUNT_ARGS, "select">): Promise<number> {
    return this.prisma.DELEGATE.count(args);
  }

  async FIND_MANY_ENTITY_FUNCTION<T extends Prisma.FIND_MANY_ARGS>(
    args: Prisma.SelectSubset<T, Prisma.FIND_MANY_ARGS>
  ): Promise<PRISMA_ENTITY[]> {
    return this.prisma.DELEGATE.findMany<Prisma.FIND_MANY_ARGS>(args);
  }
  async FIND_ONE_ENTITY_FUNCTION<T extends Prisma.FIND_ONE_ARGS>(
    args: Prisma.SelectSubset<T, Prisma.FIND_ONE_ARGS>
  ): Promise<PRISMA_ENTITY | null> {
    return this.prisma.DELEGATE.findUnique(args);
  }
  async CREATE_ENTITY_FUNCTION<T extends Prisma.CREATE_ARGS>(
    args: Prisma.SelectSubset<T, Prisma.CREATE_ARGS>
  ): Promise<PRISMA_ENTITY> {
    return this.prisma.DELEGATE.create<T>(CREATE_ARGS_MAPPING);
  }
  async UPDATE_ENTITY_FUNCTION<T extends Prisma.UPDATE_ARGS>(
    args: Prisma.SelectSubset<T, Prisma.UPDATE_ARGS>
  ): Promise<PRISMA_ENTITY> {
    return this.prisma.DELEGATE.update<T>(UPDATE_ARGS_MAPPING);
  }
  async DELETE_ENTITY_FUNCTION<T extends Prisma.DELETE_ARGS>(
    args: Prisma.SelectSubset<T, Prisma.DELETE_ARGS>
  ): Promise<PRISMA_ENTITY> {
    return this.prisma.DELEGATE.delete(args);
  }

  async uploadProfilePicture<T extends Prisma.UserFindUniqueArgs>(args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>, file: FileUpload): Promise<PrismaUser> {
    file.filename = \`profilePicture-\${args.where.id}.\${file.filename.split(".").pop()}\`;
    const containerPath = "profile-pictures";
    const profilePicture = await this.localStorageService.uploadFile(file, ["image/jpeg", "image/png"], 10485760, containerPath);

    return await this.prisma.user.update({
      where: args.where,

      data: {
        profilePicture: profilePicture as InputJsonValue
      }
    });
  }

  async downloadProfilePicture<T extends Prisma.UserFindUniqueArgs>(args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>): Promise<FileDownload> {
    const {
      profilePicture
    } = await this.prisma.user.findUniqueOrThrow({
      where: args.where
    });

    return await this.localStorageService.downloadFile(profilePicture as unknown as LocalStorageFile);
  }

  async deleteProfilePicture<T extends Prisma.UserFindUniqueArgs>(args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>): Promise<PrismaUser> {
    const {
      profilePicture
    } = await this.prisma.user.findUniqueOrThrow({
      where: args.where
    });

    await this.localStorageService.deleteFile(profilePicture as unknown as LocalStorageFile);

    return await this.prisma.user.update({
      where: args.where,

      data: {
        profilePicture: Prisma.DbNull
      }
    });
  }
}
"
`;
